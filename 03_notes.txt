Notes, Bugs, Freehand edits
---

notepad "C:\Users\jack\source\repos\Java\Minecraft\00_mod-dev\01_MC-Mods_HBs-Ore-Clusters-and-Regen\run\logs\debug.log"



Class Structure
--- 
															B. All Configs
															/
														A. OreClusterEventHandler
														/

										0. Main Class (OreClusterRegenMain)

										/			\
												RealTimeConfig
									1. OreClusterManager			

									/

								2. OreClusterCalculator	



-----
A. OreClusterEventHandler makes static references to OreClusterRegenMain

0. OreClustersAndRegenMain is the main entry class to the mod. It holds static references to and initializes the major working "Core" classes of the mod
1. 


Class Analysis
---

	OreClusterManager
	---
	- Primary Working Class of the mod
	- Intercepts chunks "onLoad" event and keeps loaded chunks in queues
	- Batches of 256 chunks are queued for "Determination" where the spread of clusters across 256 chunks is determined
	- Chunks assigned clusters are queued for "Generation" where the shape and size of the cluster is generated
	- Loaded chunks are queued for "Cleaning" to replace specified ores with "replaceable blocks" to reduce ore vein frequency

	#Variables
	---
	
	 *  config - (private) RealTimeConfig object contains statically defined and configurable variables
	 *  randSeqClusterPositionGen - (private) Random object for generating cluster positions
 
	 *  newlyLoadedChunks - (private) LinkedBlockingQueue of chunkIds that have been loaded
	 *  chunksPendingDeterminations - (private) LinkedBlockingQueue of chunkIds that are pending cluster determination
	 *  chunksPendingGeneration - (private) LinkedBlockingQueue of chunkIds that are pending cluster generation

	 *  existingClusters - (private) ConcurrentHashMap of <chunkId, <oreType, Vec3i>> containing all existing clusters
	 *      in the world, each String chunkId maps to a HashMap of each chunk's cluster type(s) and origin
	 *  existingClustersByType - (private) ConcurrentHashMap of <oreType, <chunkId>> containing all existing clusters
	 *      allows to check quickly if any newly generated chunk has a nearby cluster of its type
	 *  chunksPendingClusterGen - (private) ConcurrentLinkedQueue of chunkIds that are pending cluster generation in the main gamethread

	 *  exploredChunks - (private) LinkedHashSet of chunkIds that have been explored
	 *  mainSpiral - (private) ChunkGenerationOrderHandler object that generates a spiral of chunkIds

	 *  oreClusterCalculator - (private) Handles calculations for cluster determination and generation
	 *  managerRunning - (private) boolean flag for toggling internal threads on and off

	 *  threadPoolLoadedChunks - (private) ExecutorService for handling newly loaded chunks, 1 thread
	 *  threadPoolClusterDetermination - (private) ExecutorService for handling cluster determinations, 1 thread
	 *  threadPoolClusterGeneration - (private) ExecutorService for handling cluster generation, 3 threads



	NBT data Writer
	---
	
	#ToWrite
	- ChunkId
	- IsExplored
	- ClusterList: { {Minecraft:Gold:{x,y,z}}, ...
	- RegenDay - 0, chunk has not been written to yet, 1+ last day this chunk had generated succesfully on it

	RegenDay 0, 				- Chunk may have been explored in memory, but has not been written to yet
	RegenDay != 0, 				- chunk has been fully explored
	RegenDay !=0 && ClusterList == null	- Chunk explored, no clusters determined
	RegenDay !=0 && ClusterList == Populated- Chunk explored, clusters determined, not generated
	RegenDay !=0 && ClusterList == Full 	- Chunk explored, clusters determined and generated, check for regen
	
	

	#Formally
	- Byte 6969
	- StartCode
	- Integer RegenDay
	- ClusterList: 16B x 255 = 4096B

Game Settings loading:
---

1. EventBusSubscriber.Bus.Mod events onLoad
2. Subscribe event onLoad()
3. Server, Client, Common Configs loaded
4. foundation.AllConfigs loaded
5. Main.onLoad
6. RealTimeConfig loaded
7. OreClusterMangerConfigs loaded
8.

Performance
---

1. getChunkAccess(String chunkId)
- getting a chunk is extremely expensive ~ms x 10^2
- use sparingly

2. 


Threading
---

1. Created new MangedChunk object to store relevant cluster chunk data
	- Editing ManagedChunk will be synchronized to avoid race conditions
	- Reading from ManagedChunk will NOT be synchronized, race conditons are possible
	- We assume 1. ManagedChunk wil only progress forward in progress and 2. Any "failed" conditions will be retried
	so any misreads would only indicate the same operation trying again
2. Several concurrent queues for each chunk status in the process
3. Threads:
	- One handler thread, single thread, Synchronous queue, discard policy
	- One determine thread, single thread, unbound queue
	- 3 Cluster generation threads, unbound queue, 30s TTL
	- One Manifest thread - ideally we only want to make block changes in the main thead, 
	but we may need to load chunks to write data out in the background, loading chunks one at a time

4. Main thread:
	- Writes out block changes in a chunk that we have determined

5. 