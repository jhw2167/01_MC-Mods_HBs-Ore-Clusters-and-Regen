
1. Generating Ore config
---

Consider the oreClusters.yaml file in com.holybuckets.config . Consider the CClient, CCommon, and CServer abstraction 
configuration files and consider the concrete example of configurations from CFluids.java. Please clear the existing
configurations from the client, server and common classes to start with a clean slate. Then Please apply these abstractions
to the set of configurations I have included in oreClusters.yaml into COreClusters.java file. Note that these are all
server configurations at this point. Use the <value> field of the yaml as the default value, the <description> as the comment. Note that
<oreClusters> is an array of undetermined length where speficic or types can be specified by string and the values defined for their
particular cluster will override the base values defined above. Transcribe your implementation to ./05_ai-notes.txt.


2. Refine implementation.
---

This implementation is incorrect. Please read all the files in this project to understand the context. COreClusters.java class should be defined
and implemented like the CFluids.java class except with the below parameters:

baseOreClusterSpawnRate:
  description: "Defines the initial spawn rate of ore clusters. The number of expected ore clusters per 96 chunks"
  possibleValues: [0-96]
  value: 1

baseOreClusterVolume:
  description: "A String. Specifies the dimensions of the ore cluster.<X>x<Y>x<Z>. The true cluster will always
be smaller than this box because it will choose a shape that roughly fits inside it"
  possibleValues: ["32x32x32", "96x96x96"]
  value: "32x32x32"

baseOreClusterDensity:
  description: "Determines the density of ore within a cluster."
  possibleValues: [0, 1]
  value: .60

baseOreClusterShape:
  description: "String, Defines the shape of the ore cluster. Defaults to none, which takes a random shape"
  possibleValues: ["bowl", "anvil", "shale", "none"]
  value: "bowl"

oreClusterMaxYLevelSpawn:
  description: "Maximum Y-level at which ore clusters can propagate."
  possibleValues: [-64, 1024]
  value: 64

minChunksBetweenOreClusters:
  description: "Minimum number of chunks between ore clusters."
  possibleValues: [0, 96]
  value: 0

maxChunksBetweenOreClusters:
  description: "Maximum number of chunks between ore clusters."
  possibleValues: [9, 96]
  value: 9

baseOreVeinModifier:
  description: "Scales the presence of regular ore veins."
  possibleValues: [0, 10]
  value: 1

oreClusterReplaceableBlocks:
  description: "String. Will be parsed into an arry. List of blocks that can be replaced by the specified ore of the cluster during cluster generation"
  possibleValues: ["stone", "cobblestone", "endStone", "woodenPlanks", "andesite"]
  value: "stone", "cobblestone", "endStone", "woodenPlanks", "andesite"

oreClusterReplaceableEmptyBlock:
  description: "Block used to fill in the ore cluster shape when we want the ore to be more sparse"
  possibleValues: ["stone", "air" "<any minecraft block as string>"]
  value: "air"
	
regenerateOreClusters:
  description: "Boolean. Flag indicating if ore clusters should regenerate by default"
  possibleValues: [true, false]
  value: true

oreClusters:
  description: "List of specific ore cluster types with detailed spawn parameters."
  value:
    - ore:
        description: "String Specifies the type of ore in the cluster."
        possibleValues: ["iron", "other ores"]
        value: "iron"
      veinSpawning:
        description: "Parameters for vein spawning within the cluster."
        spawnRateModifier:
          description: "Modifier for the spawn rate of veins."
          possibleValues: [0, 1, "range between 0-1"]
          value: 0.5
       replaceableEmptyBlock:
          description: "Modifier for the spawn rate of veins."
          possibleValues: [0, 1, "range between 0-1"]
          value: 0.5
      clusterSpawning:
        description: "Parameters for cluster spawning."
        spawnRate:
          description: "Specifies the percentage chance of an ore being part of a cluster."
          possibleValues: [0, 1, "range between 0-1"]
          value: 0.5
        volume:
          description: "Dimensions of the ore cluster."
          possibleValues: ["32x32x32", "other possible sizes"]
          value: "32x32x32"
        density:
          description: "Density of ore within the cluster."
          possibleValues: ["60%", "other possible densities"]
          value: "60%"
        shape:
          description: "Shape of the ore cluster."
          possibleValues: ["bowl", "anvil", "shale", "none", "any"]
          value: "bowl"
        maxYLevelSpawn:
          description: "Maximum Y-level at which ore clusters can propagate."
          possibleValues: ["64", "other possible values"]
          value: 64
	replaceableEmptyBlock:
          description: "Modifier for the spawn rate of veins."
          possibleValues: [0, 1, "range between 0-1"]
          value: 0.5


3. Refine implementation.
---

Please make a static class Comments in COreClusters to store the string comments and use that to initialize the values. There does not
need to be a ConfigStringList class or sl() method, just read in string arrays as strings, we will parse the value later. Values should not
be initialized in the constructor.

4. Refine implementation.
---

Initialize the state variables in COreClusters as public final variables, this class uses the default constructor. Implement the s method in ConfigBase.
Also define a type for reading in toml arrays in ConfigBase and define a method for its initialization, List<> oreClusters should be defaulted to
empty array, but will be overwritten by any values in the .toml file at runtime.

5. Clean up existing classes
---

Clean up CServer.java, CClient.java and CCommon.java to remove variables and classes not found in this project. Import the correct directory for the ConfigBase class and set the correct package


6. Writing Serialize function
---

	Use the com.google.code.gson libraries to implement OreCLusterConfigModel.serialize where the each state variable is converted to a string
	representing a JSON object. Implement deserialize where a plain string is read in and the state variables are set by the JSON values. Record
	any errors encountered in a String builder and set a state variable "oreClusterConfigModelContructionErrors" listing all the errors.
	After each error, attempt to catch continue setting all remaining parameters. Include any necessary dependencies in the appropriate
	gradle or maven files. Summarize your work.


7. Writing Deseriaize function
---

	Rewrite the deserialize function of OreClusterConfigModel.java to use the setProperty methods. By sure still to catch the exceptions
	if the JSON parser fails but use LoggerBase.logError() to log the particular error, mention the property that failed using COreClusters.<appropriateProperty>.getName()
	and mention the particular ore that failed.


8. Writing Deseriaize function
---


9. Writing Deseriaize function
---

